
using Jackfruit.Internal;
using System;

namespace Jackfruit
{
    /// <summary>
    /// This is the main class for the Jackfruit generator. After you call the 
    /// Create command, the returned RootCommand will contain your CLI. If you 
    /// need multiple root commands in your application differentiate them with &gt;T&lt;
    /// </summary>
    public partial class RootCommand : RootCommand<RootCommand, RootCommand.Result>
    {
        public static RootCommand Create(params SubCommand[] subCommands)
            => (RootCommand)RootCommand<RootCommand, RootCommand.Result>.Create(null, subCommands);

        public new static RootCommand Create(Delegate runHandler, params SubCommand[] subCommands)
            => (RootCommand)RootCommand<RootCommand, RootCommand.Result>.Create(runHandler, subCommands);

        public static RootCommand Create(Delegate runHandler, Delegate validator, params SubCommand[] subCommands)
            => (RootCommand)RootCommand<RootCommand, RootCommand.Result>.Create(runHandler, subCommands);

        public partial class Result
        { }
    }
}

// *******************************

// This file is created by a generator.
using System;
using System.Threading.Tasks;
using System.CommandLine;
using System.CommandLine.Invocation;
using System.CommandLine.Parsing;
using Jackfruit.Internal;
using Jackfruit_DemoHandlers;

namespace Jackfruit
{
   public partial class RootCommand : ICommandHandler
   {
      public RootCommand()
      {
         Name = "root-command";
         GreetingArgument = new Argument<string>("GREETING");
         Add(GreetingArgument);
         StarTrek = StarTrek.Build(this);
         AddCommandToScl(StarTrek);
         AddValidator(Validate);
         Handler = this;
      }
      
      /// <summary>
      /// The result class for the RootCommand command.
      /// </summary>
      public partial class Result
      {
         public string Greeting {get; set;}
         /// <summary>
         /// Get an instance of the Result class for the NextGeneration command.
         /// </summary>
         /// <param name="command">The command corresponding to the result</param>
         /// <param name="invocationContext">The System.CommandLine InvocationContext used to retrieve.</param>
         internal static Result GetResult(RootCommand command, InvocationContext invocationContext)
         {
            return new Result(command, invocationContext.ParseResult.CommandResult);
         }
         
         private protected Result(RootCommand command, CommandResult commandResult)
         {
            Greeting = GetValueForSymbol(command.GreetingArgument, commandResult);
         }
         
         private protected Result(RootCommand command, InvocationContext invocationContext)
         : this(command, invocationContext.ParseResult.CommandResult)
         {
         }
         
      }
      
      /// <summary>
      /// The handler invoked by System.CommandLine. This will not be public when generated is more sophisticated.
      /// </summary>
      /// <param name="invocationContext">The System.CommandLine Invocation context used to retrieve values.</param>
      public int Invoke(InvocationContext invocationContext)
      {
         var result = Result.GetResult(this, invocationContext);
         DemoHandlers.Handlers.Franchise(result.Greeting);
         return invocationContext.ExitCode;
      }
      
      /// <summary>
      /// The handler invoked by System.CommandLine. This will not be public when generated is more sophisticated.
      /// </summary>
      /// <param name="invocationContext">The System.CommandLine Invocation context used to retrieve values.</param>
      public Task<int> InvokeAsync(InvocationContext invocationContext)
      {
         var result = Result.GetResult(this, invocationContext);
         DemoHandlers.Handlers.Franchise(result.Greeting);
         return Task.FromResult(invocationContext.ExitCode);
      }
      
      public Argument<string> GreetingArgument {get; set;}
      public StarTrek StarTrek {get; set;}
   }
   
}

// *******************************

// This file is created by a generator.
using System;
using System.Threading.Tasks;
using System.CommandLine;
using System.CommandLine.Invocation;
using System.CommandLine.Parsing;
using Jackfruit.Internal;

namespace Jackfruit_DemoHandlers
{
   /// <summary>
   /// The wrapper class for the StarTrek command.
   /// </summary>
   public partial class StarTrek : GeneratedCommandBase<StarTrek, StarTrek.Result, Jackfruit.RootCommand>, ICommandHandler
   {
      internal static StarTrek Build(Jackfruit.RootCommand parent)
      {
         var command = new StarTrek();
         command.Name = "star-trek";
         command.Parent = parent;
         command.KirkOption = new Option<bool>("--kirk");
         command.KirkOption.Description = "Whether to greet Captain Kirk";
         command.Add(command.KirkOption);
         command.SpockOption = new Option<bool>("--spock");
         command.SpockOption.Description = "Whether to greet Spock";
         command.Add(command.SpockOption);
         command.UhuraOption = new Option<bool>("--uhura");
         command.UhuraOption.Description = "Whether to greet Lieutenant Uhura";
         command.Add(command.UhuraOption);
         command.NextGeneration = NextGeneration.Build(command);
         command.AddCommandToScl(command.NextGeneration);
         command.AddValidator(command.Validate);
         command.Handler = command;
         return command;
      }
      
      /// <summary>
      /// The result class for the StarTrek command.
      /// </summary>
      public partial class Result : Jackfruit.RootCommand.Result
      {
         public bool Kirk {get; set;}
         public bool Spock {get; set;}
         public bool Uhura {get; set;}
         /// <summary>
         /// Get an instance of the Result class for the NextGeneration command.
         /// </summary>
         /// <param name="command">The command corresponding to the result</param>
         /// <param name="invocationContext">The System.CommandLine InvocationContext used to retrieve.</param>
         internal static Result GetResult(StarTrek command, InvocationContext invocationContext)
         {
            return new Result(command, invocationContext.ParseResult.CommandResult);
         }
         
         private protected Result(StarTrek command, CommandResult commandResult)
         : base(command.Parent, commandResult)
         {
            Kirk = GetValueForSymbol(command.KirkOption, commandResult);
            Spock = GetValueForSymbol(command.SpockOption, commandResult);
            Uhura = GetValueForSymbol(command.UhuraOption, commandResult);
         }
         
      }
      
      /// <summary>
      /// The handler invoked by System.CommandLine. This will not be public when generated is more sophisticated.
      /// </summary>
      /// <param name="invocationContext">The System.CommandLine Invocation context used to retrieve values.</param>
      public int Invoke(InvocationContext invocationContext)
      {
         var result = Result.GetResult(this, invocationContext);
         DemoHandlers.Handlers.StarTrek(result.Greeting, result.Kirk, result.Spock, result.Uhura);
         return invocationContext.ExitCode;
      }
      
      /// <summary>
      /// The handler invoked by System.CommandLine. This will not be public when generated is more sophisticated.
      /// </summary>
      /// <param name="invocationContext">The System.CommandLine Invocation context used to retrieve values.</param>
      public Task<int> InvokeAsync(InvocationContext invocationContext)
      {
         var result = Result.GetResult(this, invocationContext);
         DemoHandlers.Handlers.StarTrek(result.Greeting, result.Kirk, result.Spock, result.Uhura);
         return Task.FromResult(invocationContext.ExitCode);
      }
      
      public Option<bool> KirkOption {get; set;}
      public Option<bool> SpockOption {get; set;}
      public Option<bool> UhuraOption {get; set;}
      public NextGeneration NextGeneration {get; set;}
   }
   
}

// *******************************

// This file is created by a generator.
using System;
using System.Threading.Tasks;
using System.CommandLine;
using System.CommandLine.Invocation;
using System.CommandLine.Parsing;
using Jackfruit.Internal;

namespace Jackfruit_DemoHandlers
{
   /// <summary>
   /// The wrapper class for the NextGeneration command.
   /// </summary>
   public partial class NextGeneration : GeneratedCommandBase<NextGeneration, NextGeneration.Result, StarTrek>, ICommandHandler
   {
      internal static NextGeneration Build(StarTrek parent)
      {
         var command = new NextGeneration();
         command.Name = "next-generation";
         command.Parent = parent;
         command.PicardOption = new Option<bool>(new string[] {"--picard", "-p"});
         command.PicardOption.Description = "This is the description for Picard";
         command.Add(command.PicardOption);
         command.DeepSpaceNine = DeepSpaceNine.Build(command);
         command.AddCommandToScl(command.DeepSpaceNine);
         command.Voyager = Voyager.Build(command);
         command.AddCommandToScl(command.Voyager);
         command.AddValidator(command.Validate);
         command.Handler = command;
         return command;
      }
      
      /// <summary>
      /// The result class for the NextGeneration command.
      /// </summary>
      public partial class Result : StarTrek.Result
      {
         public bool Picard {get; set;}
         /// <summary>
         /// Get an instance of the Result class for the NextGeneration command.
         /// </summary>
         /// <param name="command">The command corresponding to the result</param>
         /// <param name="invocationContext">The System.CommandLine InvocationContext used to retrieve.</param>
         internal static Result GetResult(NextGeneration command, InvocationContext invocationContext)
         {
            return new Result(command, invocationContext.ParseResult.CommandResult);
         }
         
         private protected Result(NextGeneration command, CommandResult commandResult)
         : base(command.Parent, commandResult)
         {
            Picard = GetValueForSymbol(command.PicardOption, commandResult);
         }
         
      }
      
      /// <summary>
      /// The handler invoked by System.CommandLine. This will not be public when generated is more sophisticated.
      /// </summary>
      /// <param name="invocationContext">The System.CommandLine Invocation context used to retrieve values.</param>
      public int Invoke(InvocationContext invocationContext)
      {
         var result = Result.GetResult(this, invocationContext);
         DemoHandlers.Handlers.NextGeneration(result.Greeting, result.Picard);
         return invocationContext.ExitCode;
      }
      
      /// <summary>
      /// The handler invoked by System.CommandLine. This will not be public when generated is more sophisticated.
      /// </summary>
      /// <param name="invocationContext">The System.CommandLine Invocation context used to retrieve values.</param>
      public Task<int> InvokeAsync(InvocationContext invocationContext)
      {
         var result = Result.GetResult(this, invocationContext);
         DemoHandlers.Handlers.NextGeneration(result.Greeting, result.Picard);
         return Task.FromResult(invocationContext.ExitCode);
      }
      
      public Option<bool> PicardOption {get; set;}
      public DeepSpaceNine DeepSpaceNine {get; set;}
      public Voyager Voyager {get; set;}
   }
   
}

// *******************************

// This file is created by a generator.
using System;
using System.Threading.Tasks;
using System.CommandLine;
using System.CommandLine.Invocation;
using System.CommandLine.Parsing;
using Jackfruit.Internal;

namespace Jackfruit_DemoHandlers
{
   /// <summary>
   /// The wrapper class for the DeepSpaceNine command.
   /// </summary>
   public partial class DeepSpaceNine : GeneratedCommandBase<DeepSpaceNine, DeepSpaceNine.Result, NextGeneration>, ICommandHandler
   {
      internal static DeepSpaceNine Build(NextGeneration parent)
      {
         var command = new DeepSpaceNine();
         command.Name = "deep-space-nine";
         command.Parent = parent;
         command.SiskoOption = new Option<bool>("--sisko");
         command.Add(command.SiskoOption);
         command.OdoOption = new Option<bool>("--odo");
         command.Add(command.OdoOption);
         command.DaxOption = new Option<bool>("--dax");
         command.Add(command.DaxOption);
         command.WorfOption = new Option<bool>("--worf");
         command.Add(command.WorfOption);
         command.OBrienOption = new Option<bool>("--obrien");
         command.Add(command.OBrienOption);
         command.AddValidator(command.Validate);
         command.Handler = command;
         return command;
      }
      
      /// <summary>
      /// The result class for the DeepSpaceNine command.
      /// </summary>
      public partial class Result : NextGeneration.Result
      {
         public bool Sisko {get; set;}
         public bool Odo {get; set;}
         public bool Dax {get; set;}
         public bool Worf {get; set;}
         public bool OBrien {get; set;}
         /// <summary>
         /// Get an instance of the Result class for the NextGeneration command.
         /// </summary>
         /// <param name="command">The command corresponding to the result</param>
         /// <param name="invocationContext">The System.CommandLine InvocationContext used to retrieve.</param>
         internal static Result GetResult(DeepSpaceNine command, InvocationContext invocationContext)
         {
            return new Result(command, invocationContext.ParseResult.CommandResult);
         }
         
         private protected Result(DeepSpaceNine command, CommandResult commandResult)
         : base(command.Parent, commandResult)
         {
            Sisko = GetValueForSymbol(command.SiskoOption, commandResult);
            Odo = GetValueForSymbol(command.OdoOption, commandResult);
            Dax = GetValueForSymbol(command.DaxOption, commandResult);
            Worf = GetValueForSymbol(command.WorfOption, commandResult);
            OBrien = GetValueForSymbol(command.OBrienOption, commandResult);
         }
         
      }
      
      /// <summary>
      /// The handler invoked by System.CommandLine. This will not be public when generated is more sophisticated.
      /// </summary>
      /// <param name="invocationContext">The System.CommandLine Invocation context used to retrieve values.</param>
      public int Invoke(InvocationContext invocationContext)
      {
         var result = Result.GetResult(this, invocationContext);
         DemoHandlers.Handlers.DeepSpaceNine(result.Greeting, result.Sisko, result.Odo, result.Dax, result.Worf, result.OBrien);
         return invocationContext.ExitCode;
      }
      
      /// <summary>
      /// The handler invoked by System.CommandLine. This will not be public when generated is more sophisticated.
      /// </summary>
      /// <param name="invocationContext">The System.CommandLine Invocation context used to retrieve values.</param>
      public Task<int> InvokeAsync(InvocationContext invocationContext)
      {
         var result = Result.GetResult(this, invocationContext);
         DemoHandlers.Handlers.DeepSpaceNine(result.Greeting, result.Sisko, result.Odo, result.Dax, result.Worf, result.OBrien);
         return Task.FromResult(invocationContext.ExitCode);
      }
      
      public Option<bool> SiskoOption {get; set;}
      public Option<bool> OdoOption {get; set;}
      public Option<bool> DaxOption {get; set;}
      public Option<bool> WorfOption {get; set;}
      public Option<bool> OBrienOption {get; set;}
   }
   
}

// *******************************

// This file is created by a generator.
using System;
using System.Threading.Tasks;
using System.CommandLine;
using System.CommandLine.Invocation;
using System.CommandLine.Parsing;
using Jackfruit.Internal;

namespace Jackfruit_DemoHandlers
{
   /// <summary>
   /// The wrapper class for the Voyager command.
   /// </summary>
   public partial class Voyager : GeneratedCommandBase<Voyager, Voyager.Result, NextGeneration>, ICommandHandler
   {
      internal static Voyager Build(NextGeneration parent)
      {
         var command = new Voyager();
         command.Name = "voyager";
         command.Parent = parent;
         command.JanewayOption = new Option<bool>("--janeway");
         command.Add(command.JanewayOption);
         command.ChakotayOption = new Option<bool>("--chakotay");
         command.Add(command.ChakotayOption);
         command.TorresOption = new Option<bool>("--torres");
         command.Add(command.TorresOption);
         command.TuvokOption = new Option<bool>("--tuvok");
         command.Add(command.TuvokOption);
         command.SevenOfNineOption = new Option<bool>("--seven-of-nine");
         command.Add(command.SevenOfNineOption);
         command.AddValidator(command.Validate);
         command.Handler = command;
         return command;
      }
      
      /// <summary>
      /// The result class for the Voyager command.
      /// </summary>
      public partial class Result : NextGeneration.Result
      {
         public System.CommandLine.IConsole Console {get; set;}
         public bool Janeway {get; set;}
         public bool Chakotay {get; set;}
         public bool Torres {get; set;}
         public bool Tuvok {get; set;}
         public bool SevenOfNine {get; set;}
         /// <summary>
         /// Get an instance of the Result class for the NextGeneration command.
         /// </summary>
         /// <param name="command">The command corresponding to the result</param>
         /// <param name="invocationContext">The System.CommandLine InvocationContext used to retrieve.</param>
         internal static Result GetResult(Voyager command, InvocationContext invocationContext)
         {
            return new Result(command, invocationContext.ParseResult.CommandResult);
         }
         
         private protected Result(Voyager command, CommandResult commandResult)
         : base(command.Parent, commandResult)
         {
            Janeway = GetValueForSymbol(command.JanewayOption, commandResult);
            Chakotay = GetValueForSymbol(command.ChakotayOption, commandResult);
            Torres = GetValueForSymbol(command.TorresOption, commandResult);
            Tuvok = GetValueForSymbol(command.TuvokOption, commandResult);
            SevenOfNine = GetValueForSymbol(command.SevenOfNineOption, commandResult);
         }
         
      }
      
      /// <summary>
      /// The handler invoked by System.CommandLine. This will not be public when generated is more sophisticated.
      /// </summary>
      /// <param name="invocationContext">The System.CommandLine Invocation context used to retrieve values.</param>
      public int Invoke(InvocationContext invocationContext)
      {
         var result = Result.GetResult(this, invocationContext);
         DemoHandlers.Handlers.Voyager(result.Console, result.Greeting, result.Janeway, result.Chakotay, result.Torres, result.Tuvok, result.SevenOfNine);
         return invocationContext.ExitCode;
      }
      
      /// <summary>
      /// The handler invoked by System.CommandLine. This will not be public when generated is more sophisticated.
      /// </summary>
      /// <param name="invocationContext">The System.CommandLine Invocation context used to retrieve values.</param>
      public Task<int> InvokeAsync(InvocationContext invocationContext)
      {
         var result = Result.GetResult(this, invocationContext);
         DemoHandlers.Handlers.Voyager(result.Console, result.Greeting, result.Janeway, result.Chakotay, result.Torres, result.Tuvok, result.SevenOfNine);
         return Task.FromResult(invocationContext.ExitCode);
      }
      
      public Option<bool> JanewayOption {get; set;}
      public Option<bool> ChakotayOption {get; set;}
      public Option<bool> TorresOption {get; set;}
      public Option<bool> TuvokOption {get; set;}
      public Option<bool> SevenOfNineOption {get; set;}
   }
   
}
