
namespace Jackfruit
{
    public partial class Cli
    {
        public static void Create(CliNode cliRoot)
        { }
    }
}
// *******************************

// This file is created by a generator.
using DemoHandlers;

namespace Jackfruit
{
   public partial class Cli
   {
       static Cli()
      {
         NextGeneration = NextGeneration.Create();
      }
      
      public static  NextGeneration NextGeneration {get; set;}
   }
   
}

// *******************************

// This file is created by a generator.
using System;
using System.CommandLine;
using System.CommandLine.Invocation;
using System.CommandLine.Parsing;
using Jackfruit.Internal;
using Jackfruit;

namespace DemoHandlers
{
   public partial class NextGeneration : GeneratedCommandBase<NextGeneration, NextGeneration.Result>, ICommandHandler
   {
      private NextGeneration() : base("NextGeneration")
      {
      }
      
      public static NextGeneration Create()
      {
         var command = new NextGeneration();
         command.GreetingArgument = new Argument<string>("greetingArg");
         command.Add(command.GreetingArgument);
         command.PicardOption = new Option<bool>("--Picard");
         command.PicardOption.Description = "This is the description for Picard";
         command.Add(command.PicardOption);
         command.SystemCommandLineCommand.AddValidator(command.Validate);
         command.Handler = command;
         return command;
      }
      
      public class Result
      {
         internal Result(NextGeneration command, CommandResult result)
         {
            Greeting = result.GetValueForArgument(command.GreetingArgument);
            Picard = result.GetValueForOption(command.PicardOption);
         }
         
         public string Greeting {get; set;}
         public bool Picard {get; set;}
      }
      
      public override Result GetResult(CommandResult result)
      {
         return new Result(this, result);
      }
      
      public int Invoke(InvocationContext context)
      {
         var result = GetResult(context);
         DemoHandlers.Handlers.NextGeneration(result.Greeting, result.Picard);
         return context.ExitCode;
      }
      
      public Task<int> InvokeAsync(InvocationContext context)
      {
         var result = GetResult(context);
         DemoHandlers.Handlers.NextGeneration(result.Greeting, result.Picard);
         return Task.FromResult(context.ExitCode);
      }
      
      public Argument<string> GreetingArgument {get; set;}
      public Option<bool> PicardOption {get; set;}
   }
   
}
