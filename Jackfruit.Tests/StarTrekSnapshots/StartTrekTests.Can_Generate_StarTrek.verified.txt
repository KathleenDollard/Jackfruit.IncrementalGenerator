// This file is created by a generator.
using System;
using System.CommandLine;
using System.CommandLine.Invocation;
using System.Threading.Tasks;

namespace DemoHandlers
{
    class ConsoleApplication
   {
      private StarTrekCommand _CliRoot;
      private ConsoleApplication()
      {
      }
      
      public static void AddRootCommand(Delegate rootCommandHandler)
      {
      }
      
      public static ConsoleApplication Create()
      {
         var app = new ConsoleApplication();
         app._CliRoot = StarTrekCommand.Create();
         return app;
      }
      
      public static int Run(string[] args)
      {
         var app = ConsoleApplication.Create();
         return app.CliRoot.Invoke(args);
      }
      
      public StarTrekCommand CliRoot
      {
         get
         {
            return _CliRoot;
         }
      }
   }
   
}

// *******************************

// This file is created by a generator.
using System;
using System.CommandLine;
using System.CommandLine.Invocation;
using System.Threading.Tasks;

namespace DemoHandlers
{
   public partial class StarTrekCommand : RootCommand, ICommandHandler
   {
      private StarTrekCommand()
      {
      }
      
      public static StarTrekCommand Create()
      {
         var command = new StarTrekCommand();
         command.greetingArgument = new Argument<string>("greetingArg");
         command.Add(command.greetingArgument);
         command.kirkOption = new Option<bool>("kirk");
         command.kirkOption.Description = "Whether to greek Captain Kirk";
         command.Add(command.kirkOption);
         command.spockOption = new Option<bool>("spock");
         command.spockOption.Description = "Whether to greek Spock";
         command.Add(command.spockOption);
         command.uhuraOption = new Option<bool>("uhura");
         command.uhuraOption.Description = "Whether to greek Lieutenant Uhura";
         command.Add(command.uhuraOption);
         command.Handler = command;
         return command;
      }
      
      public Task<int> InvokeAsync(InvocationContext context)
      {
         Handlers.StarTrek(greetingArgumentResult(context), kirkOptionResult(context), spockOptionResult(context), uhuraOptionResult(context));
         return Task.FromResult(context.ExitCode);
      }
      
      public Argument<string> greetingArgument {get; set;}
      public string greetingArgumentResult(InvocationContext context)
      {
         return context.ParseResult.GetValueForArgument<string>(greetingArgument);
      }
      
      public Option<bool> kirkOption {get; set;}
      public bool kirkOptionResult(InvocationContext context)
      {
         return context.ParseResult.GetValueForOption<bool>(kirkOption);
      }
      
      public Option<bool> spockOption {get; set;}
      public bool spockOptionResult(InvocationContext context)
      {
         return context.ParseResult.GetValueForOption<bool>(spockOption);
      }
      
      public Option<bool> uhuraOption {get; set;}
      public bool uhuraOptionResult(InvocationContext context)
      {
         return context.ParseResult.GetValueForOption<bool>(uhuraOption);
      }
      
   }
   
}
