// This file is created by a generator.
using System
using System.CommandLine
using System.CommandLine.Invocation
using System.Threading.Tasks

namespace DemoHandlers
{
    class ConsoleApplication
   {
      public Handlers.StarTrekCommand _CliRoot
      public ConsoleApplication()
      {
      }
      
      public static ConsoleApplication CreateWithRootCommand(Delegate rootCommandHandler)
      {
         _CliRoot = new Handlers.StarTrekCommand();
      }
      
      public Handlers.StarTrekCommand CliRoot
      {
         get
         {
            return _CliRoot;
         }
      }
   }
   
}

// *******************************

// This file is created by a generator.
using System
using System.CommandLine
using System.CommandLine.Invocation
using System.Threading.Tasks

namespace DemoHandlers
{
   public partial class Handlers.StarTrekCommand
   {
      public Handlers.StarTrekCommand()
      {
      }
      
      public Create Handlers.StarTrekCommand()
      {
         var command = new Handlers.StarTrekCommand();
         command.greetingOption = new Option<>(Jackfruit.IncrementalGenerator.CodeModels.StringLiteralModel);
         command.greetingOption.Description = "What greeting to use";
         command.Add(Jackfruit.IncrementalGenerator.CodeModels.SymbolModel);
         command.kirkOption = new Option<>(Jackfruit.IncrementalGenerator.CodeModels.StringLiteralModel);
         command.kirkOption.Description = "Whether to greek Captain Kirk";
         command.Add(Jackfruit.IncrementalGenerator.CodeModels.SymbolModel);
         command.spockOption = new Option<>(Jackfruit.IncrementalGenerator.CodeModels.StringLiteralModel);
         command.spockOption.Description = "Whether to greek Spock";
         command.Add(Jackfruit.IncrementalGenerator.CodeModels.SymbolModel);
         command.uhuraOption = new Option<>(Jackfruit.IncrementalGenerator.CodeModels.StringLiteralModel);
         command.uhuraOption.Description = "Whether to greek Lieutenant Uhura";
         command.Add(Jackfruit.IncrementalGenerator.CodeModels.SymbolModel);
         command.Handler = command;
         return "command";
      }
      
      public Task<int> InvokeAsync(InvocationContext context)
      {
         .Handlers.StarTrek();
         return Task.FromResult(Jackfruit.IncrementalGenerator.CodeModels.SymbolModel);
      }
      
      public Option<> command.greetingOption {get; set;}
      public  command.greetingOptionResult(InvocationContext context)
      {
         return context.ParseResult.GetValueForOption<>(Jackfruit.IncrementalGenerator.CodeModels.SymbolModel);
      }
      
      public Option<> command.kirkOption {get; set;}
      public  command.kirkOptionResult(InvocationContext context)
      {
         return context.ParseResult.GetValueForOption<>(Jackfruit.IncrementalGenerator.CodeModels.SymbolModel);
      }
      
      public Option<> command.spockOption {get; set;}
      public  command.spockOptionResult(InvocationContext context)
      {
         return context.ParseResult.GetValueForOption<>(Jackfruit.IncrementalGenerator.CodeModels.SymbolModel);
      }
      
      public Option<> command.uhuraOption {get; set;}
      public  command.uhuraOptionResult(InvocationContext context)
      {
         return context.ParseResult.GetValueForOption<>(Jackfruit.IncrementalGenerator.CodeModels.SymbolModel);
      }
      
   }
   
}