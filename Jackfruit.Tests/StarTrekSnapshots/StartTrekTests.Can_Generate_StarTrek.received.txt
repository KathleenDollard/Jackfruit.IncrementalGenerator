// This file is created by a generator.
using System;
using System.CommandLine;
using System.CommandLine.Invocation;
using System.CommandLine.Parsing;
using Jackfruit;

namespace DemoHandlers
{
   public partial class CliRoot : GeneratedCommandBase<CliRoot, CliRoot.Result>, ICommandHandler
   {
      public static CliRoot Create(Delegate MethodToRun)
      {
         return Create();
      }
      
      private CliRoot() : base("CliRoot")
      {
      }
      
      public static CliRoot Create()
      {
         var command = new CliRoot();
         command.GreetingArgument = new Argument<string>("greetingArg");
         command.Add(command.GreetingArgument);
         command.KirkOption = new Option<bool>("--Kirk");
         command.KirkOption.Description = "Whether to greet Captain Kirk";
         command.Add(command.KirkOption);
         command.SpockOption = new Option<bool>("--Spock");
         command.SpockOption.Description = "Whether to greet Spock";
         command.Add(command.SpockOption);
         command.UhuraOption = new Option<bool>("--Uhura");
         command.UhuraOption.Description = "Whether to greet Lieutenant Uhura";
         command.Add(command.UhuraOption);
         command.NextGenerationCommand = Commands.NextGeneration.Create();
         command.Add(command.NextGenerationCommand);
         command.SystemCommandLineCommand.AddValidator(command.Validate);
         command.Handler = command;
         return command;
      }
      
      public class Result
      {
         internal Result(CliRoot command, CommandResult result)
         {
            Greeting = CommandResult.GetValueForArgument(command.GreetingArgument);
            Kirk = CommandResult.GetValueForOption(command.KirkOption);
            Spock = CommandResult.GetValueForOption(command.SpockOption);
            Uhura = CommandResult.GetValueForOption(command.UhuraOption);
         }
         
          string Greeting {get; set;}
          bool Kirk {get; set;}
          bool Spock {get; set;}
          bool Uhura {get; set;}
      }
      
      public override Result GetResult(CommandResult result)
      {
         return new Result(this, result);
      }
      
      public int Invoke(InvocationContext context)
      {
         Handlers.StarTrek(result.GreetingArgument, result.KirkOption, result.SpockOption, result.UhuraOption);
         return context.ExitCode;
      }
      
      public Task<int> InvokeAsync(InvocationContext context)
      {
         Handlers.StarTrek(result.GreetingArgument, result.KirkOption, result.SpockOption, result.UhuraOption);
         return Task.FromResult(context.ExitCode);
      }
      
      public Argument<string> GreetingArgument {get; set;}
      public Option<bool> KirkOption {get; set;}
      public Option<bool> SpockOption {get; set;}
      public Option<bool> UhuraOption {get; set;}
      public Commands.NextGeneration NextGenerationCommand {get; set;}
   }
   
   public class Commands
   {
      public partial class NextGeneration : GeneratedCommandBase<NextGeneration, NextGeneration.Result, CliRoot>, ICommandHandler
      {
         private NextGeneration(CliRoot parent) : base("NextGeneration", parent)
         {
         }
         
         public static NextGeneration Create()
         {
            var command = new Commands.NextGeneration();
            command.GreetingArgument = new Argument<string>("greetingArg");
            command.Add(command.GreetingArgument);
            command.PicardOption = new Option<bool>("--Picard");
            command.PicardOption.Description = "This is the description for Picard";
            command.Add(command.PicardOption);
            command.DeepSpaceNineCommand = Commands.NextGeneration.DeepSpaceNine.Create();
            command.Add(command.DeepSpaceNineCommand);
            command.SystemCommandLineCommand.AddValidator(command.Validate);
            command.Handler = command;
            return command;
         }
         
         public class Result
         {
            internal Result(NextGeneration command, CommandResult result)
            {
               var parentResult = command.Parent.GetResult(result);
               Greeting = parentResult.Greeting;
               Kirk = parentResult.Kirk;
               Spock = parentResult.Spock;
               Uhura = parentResult.Uhura;
               Picard = CommandResult.GetValueForOption(command.PicardOption);
            }
            
             string Greeting {get; set;}
             bool Kirk {get; set;}
             bool Spock {get; set;}
             bool Uhura {get; set;}
             bool Picard {get; set;}
         }
         
         public override Result GetResult(CommandResult result)
         {
            return new Result(this, result);
         }
         
         public int Invoke(InvocationContext context)
         {
            Handlers.NextGeneration(result.GreetingArgument, result.PicardOption);
            return context.ExitCode;
         }
         
         public Task<int> InvokeAsync(InvocationContext context)
         {
            Handlers.NextGeneration(result.GreetingArgument, result.PicardOption);
            return Task.FromResult(context.ExitCode);
         }
         
         public Argument<string> GreetingArgument {get; set;}
         public Option<bool> PicardOption {get; set;}
         public Commands.NextGeneration.DeepSpaceNine DeepSpaceNineCommand {get; set;}
         public partial class DeepSpaceNine : GeneratedCommandBase<DeepSpaceNine, DeepSpaceNine.Result, NextGeneration>, ICommandHandler
         {
            private DeepSpaceNine(Commands.NextGeneration.NextGeneration parent) : base("DeepSpaceNine", parent)
            {
            }
            
            public static DeepSpaceNine Create()
            {
               var command = new Commands.NextGeneration.DeepSpaceNine();
               command.GreetingArgument = new Argument<string>("greetingArg");
               command.Add(command.GreetingArgument);
               command.SiskoOption = new Option<bool>("--Sisko");
               command.Add(command.SiskoOption);
               command.OdoOption = new Option<bool>("--Odo");
               command.Add(command.OdoOption);
               command.DaxOption = new Option<bool>("--Dax");
               command.Add(command.DaxOption);
               command.WorfOption = new Option<bool>("--Worf");
               command.Add(command.WorfOption);
               command.OBrienOption = new Option<bool>("--OBrien");
               command.Add(command.OBrienOption);
               command.SystemCommandLineCommand.AddValidator(command.Validate);
               command.Handler = command;
               return command;
            }
            
            public class Result
            {
               internal Result(DeepSpaceNine command, CommandResult result)
               {
                  var parentResult = command.Parent.GetResult(result);
                  Greeting = parentResult.Greeting;
                  Picard = parentResult.Picard;
                  Greeting = parentResult.Greeting;
                  Kirk = parentResult.Kirk;
                  Spock = parentResult.Spock;
                  Uhura = parentResult.Uhura;
                  Sisko = CommandResult.GetValueForOption(command.SiskoOption);
                  Odo = CommandResult.GetValueForOption(command.OdoOption);
                  Dax = CommandResult.GetValueForOption(command.DaxOption);
                  Worf = CommandResult.GetValueForOption(command.WorfOption);
                  OBrien = CommandResult.GetValueForOption(command.OBrienOption);
               }
               
                string Greeting {get; set;}
                bool Picard {get; set;}
                string Greeting {get; set;}
                bool Kirk {get; set;}
                bool Spock {get; set;}
                bool Uhura {get; set;}
                bool Sisko {get; set;}
                bool Odo {get; set;}
                bool Dax {get; set;}
                bool Worf {get; set;}
                bool OBrien {get; set;}
            }
            
            public override Result GetResult(CommandResult result)
            {
               return new Result(this, result);
            }
            
            public int Invoke(InvocationContext context)
            {
               Handlers.DeepSpaceNine(result.GreetingArgument, result.SiskoOption, result.OdoOption, result.DaxOption, result.WorfOption, result.OBrienOption);
               return context.ExitCode;
            }
            
            public Task<int> InvokeAsync(InvocationContext context)
            {
               Handlers.DeepSpaceNine(result.GreetingArgument, result.SiskoOption, result.OdoOption, result.DaxOption, result.WorfOption, result.OBrienOption);
               return Task.FromResult(context.ExitCode);
            }
            
            public Argument<string> GreetingArgument {get; set;}
            public Option<bool> SiskoOption {get; set;}
            public Option<bool> OdoOption {get; set;}
            public Option<bool> DaxOption {get; set;}
            public Option<bool> WorfOption {get; set;}
            public Option<bool> OBrienOption {get; set;}
         }
         
      }
      
   }
   
}
