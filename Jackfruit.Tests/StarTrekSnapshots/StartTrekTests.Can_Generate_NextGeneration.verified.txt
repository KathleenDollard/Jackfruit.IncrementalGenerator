//
namespace Jackfruit
{
    public partial class ConsoleApplication
    {
        public static void AddRootCommand(Delegate rootCommandHandler) { }
    }
}

// *******************************

// This file is created by a generator.
using System;
using System.CommandLine;
using System.CommandLine.Invocation;
using System.Threading.Tasks;
using DemoHandlers;

namespace Jackfruit
{
   public partial class ConsoleApplication
   {
      private NextGenerationCommand _CliRoot;
      private ConsoleApplication()
      {
      }
      
      public static ConsoleApplication Create()
      {
         var app = new ConsoleApplication();
         app._CliRoot = NextGenerationCommand.Create();
         return app;
      }
      
      public static int Run(string[] args)
      {
         var app = ConsoleApplication.Create();
         return app.CliRoot.Invoke(args);
      }
      
      public NextGenerationCommand CliRoot
      {
         get
         {
            return _CliRoot;
         }
      }
      public static class NextGeneration
      {
         public static void AddSubCommand(Delegate handler)
         {
         }
         
      }
      
   }
   
}

// *******************************

// This file is created by a generator.
using System;
using System.CommandLine;
using System.CommandLine.Invocation;
using System.Threading.Tasks;

namespace DemoHandlers
{
   public partial class NextGenerationCommand : RootCommand, ICommandHandler
   {
      private NextGenerationCommand()
      {
      }
      
      public static NextGenerationCommand Create()
      {
         var command = new NextGenerationCommand();
         command.greetingArgument = new Argument<string>("greetingArg");
         command.Add(command.greetingArgument);
         command.picardOption = new Option<bool>("--picard");
         command.picardOption.Description = "This is the description for Picard";
         command.Add(command.picardOption);
         command.Handler = command;
         return command;
      }
      
      public Task<int> InvokeAsync(InvocationContext context)
      {
         Handlers.NextGeneration(greetingArgumentResult(context), picardOptionResult(context));
         return Task.FromResult(context.ExitCode);
      }
      
      public Argument<string> greetingArgument {get; set;}
      public string greetingArgumentResult(InvocationContext context)
      {
         return context.ParseResult.GetValueForArgument<string>(greetingArgument);
      }
      
      public Option<bool> picardOption {get; set;}
      public bool picardOptionResult(InvocationContext context)
      {
         return context.ParseResult.GetValueForOption<bool>(picardOption);
      }
      
   }
   
}
