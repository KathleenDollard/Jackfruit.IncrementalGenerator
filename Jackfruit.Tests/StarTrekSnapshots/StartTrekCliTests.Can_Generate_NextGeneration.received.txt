
namespace Jackfruit
{
    /// <summary>
    /// This is the entry point for the Jackfruit generator. At present it 'jumps namespaces' 
    /// after first use, moving from Jackfruit to the namespace of your root handler. After 
    /// generation, it will include a static property to access your root by name.
    /// </summary>
    public partial class Cli
    {
        /// <summary>
        /// This method builds a tree that defines your CLI.  
        /// </summary>
        /// <param name="cliRoot">A CliNode pointing to your root handler.</param>
        public static void Create(CliNode cliRoot)
        { }
    }
}

// *******************************

// This file is created by a generator.
using DemoHandlers;

namespace Jackfruit
{
   public partial class Cli
   {
       static Cli()
      {
         NextGeneration = NextGeneration.Create();
      }
      
      public static  NextGeneration NextGeneration {get; set;}
   }
   
}

// *******************************

// This file is created by a generator.
using System;
using System.CommandLine;
using System.CommandLine.Invocation;
using System.CommandLine.Parsing;
using System.Threading.Tasks;
using Jackfruit.Internal;
using Jackfruit;

namespace DemoHandlers
{
   /// <summary>
   /// The wrapper class for the NextGeneration command.
   /// </summary>
   public partial class NextGeneration : GeneratedCommandBase<NextGeneration, NextGeneration.Result>, ICommandHandler
   {
      private NextGeneration() : base("NextGeneration")
      {
      }
      
      internal static NextGeneration Create()
      {
         var command = new NextGeneration();
         command.GreetingArgument = new Argument<string>("greetingArg");
         command.Add(command.GreetingArgument);
         command.PicardOption = new Option<bool>("--Picard");
         command.PicardOption.Description = "This is the description for Picard";
         command.Add(command.PicardOption);
         command.SystemCommandLineCommand.AddValidator(command.Validate);
         command.Handler = command;
         return command;
      }
      
      /// <summary>
      /// The result class for the NextGeneration command.
      /// </summary>
      public class Result
      {
         internal Result(NextGeneration command, CommandResult result)
         {
            Greeting = result.GetValueForArgument(command.GreetingArgument);
            Picard = result.GetValueForOption(command.PicardOption);
         }
         
         public string Greeting {get; set;}
         public bool Picard {get; set;}
      }
      
      /// <summary>
      /// Get an instance of the Result class for the NextGeneration command.
      /// </summary>
      /// <param name="commadResult">The System.CommandLine CommandResult used to retrieve values for the Result object</param>
      public override Result GetResult(CommandResult commadResult)
      {
         return new Result(this, commadResult);
      }
      
      /// <summary>
      /// The handler invoked by System.CommandLine. This will not be public when generated is more sophisticated.
      /// </summary>
      /// <param name="context">The System.CommandLine Invocation context used to retrieve values.</param>
      public int Invoke(InvocationContext context)
      {
         var result = GetResult(context);
         DemoHandlers.Handlers.NextGeneration(result.Greeting, result.Picard);
         return context.ExitCode;
      }
      
      /// <summary>
      /// The handler invoked by System.CommandLine. This will not be public when generated is more sophisticated.
      /// </summary>
      /// <param name="context">The System.CommandLine Invocation context used to retrieve values.</param>
      public Task<int> InvokeAsync(InvocationContext context)
      {
         var result = GetResult(context);
         DemoHandlers.Handlers.NextGeneration(result.Greeting, result.Picard);
         return Task.FromResult(context.ExitCode);
      }
      
      public Argument<string> GreetingArgument {get; set;}
      public Option<bool> PicardOption {get; set;}
   }
   
}
