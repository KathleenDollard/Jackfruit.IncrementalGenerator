
namespace Jackfruit
{
    /// <summary>
    /// This is the entry point for the Jackfruit generator. At present it 'jumps namespaces' 
    /// after first use, moving from Jackfruit to the namespace of your root handler. After 
    /// generation, it will include a static property to access your root by name.
    /// </summary>
    public partial class Cli
    {
        /// <summary>
        /// This method builds a tree that defines your CLI.  
        /// </summary>
        /// <param name="cliRoot">A CliNode pointing to your root handler.</param>
        public static void Create(CliNode cliRoot)
        { }
    }
}

// *******************************

// This file is created by a generator.
using DemoHandlers;

namespace Jackfruit
{
   public partial class Cli
   {
       static Cli()
      {
         Voyager = Voyager.Create();
      }
      
      public static  Voyager Voyager {get; set;}
   }
   
}

// *******************************

// This file is created by a generator.
using System;
using System.CommandLine;
using System.CommandLine.Invocation;
using System.CommandLine.Parsing;
using System.CommandLine.Binding;
using System.Threading.Tasks;
using Jackfruit.Internal;
using Jackfruit;

namespace DemoHandlers
{
   /// <summary>
   /// The wrapper class for the Voyager command.
   /// </summary>
   public partial class Voyager : GeneratedCommandBase<Voyager, Voyager.Result>, ICommandHandler
   {
      private Voyager() : base("Voyager")
      {
      }
      
      internal static Voyager Create()
      {
         var command = new Voyager();
         command.GreetingArgument = new Argument<string>("greetingArg");
         command.Add(command.GreetingArgument);
         command.JanewayOption = new Option<bool>("--Janeway");
         command.Add(command.JanewayOption);
         command.ChakotayOption = new Option<bool>("--Chakotay");
         command.Add(command.ChakotayOption);
         command.TorresOption = new Option<bool>("--Torres");
         command.Add(command.TorresOption);
         command.TuvokOption = new Option<bool>("--Tuvok");
         command.Add(command.TuvokOption);
         command.SevenOfNineOption = new Option<bool>("--SevenOfNine");
         command.Add(command.SevenOfNineOption);
         command.SystemCommandLineCommand.AddValidator(command.Validate);
         command.Handler = command;
         return command;
      }
      
      /// <summary>
      /// The result class for the Voyager command.
      /// </summary>
      public class Result
      {
         internal Result(Voyager command, InvocationContext invocationContext) : this(command, invocationContext.ParseResult.CommandResult)
         {
            Console = GetService<System.CommandLine.IConsole>(invocationContext);
         }
         
         internal Result(Voyager command, CommandResult commandResult)
         {
            Greeting = GetValueForSymbol(command.GreetingArgument, commandResult);
            Janeway = GetValueForSymbol(command.JanewayOption, commandResult);
            Chakotay = GetValueForSymbol(command.ChakotayOption, commandResult);
            Torres = GetValueForSymbol(command.TorresOption, commandResult);
            Tuvok = GetValueForSymbol(command.TuvokOption, commandResult);
            SevenOfNine = GetValueForSymbol(command.SevenOfNineOption, commandResult);
         }
         
         public System.CommandLine.IConsole Console {get; set;}
         public string Greeting {get; set;}
         public bool Janeway {get; set;}
         public bool Chakotay {get; set;}
         public bool Torres {get; set;}
         public bool Tuvok {get; set;}
         public bool SevenOfNine {get; set;}
      }
      
      /// <summary>
      /// Get an instance of the Result class for the Voyager command.
      /// </summary>
      /// <param name="invocationContext">The System.CommandLine InvocationContext used to retrieve values.</param>
      public override Result GetResult(InvocationContext invocationContext)
      {
         return new Result(this, invocationContext);
      }
      
      /// <summary>
      /// Get an instance of the Result class for the Voyager command that will not include any services.
      /// </summary>
      /// <param name="result">The System.CommandLine CommandResult used to retrieve values.</param>
      public override Result GetResult(CommandResult result)
      {
         return new Result(this, result);
      }
      
      /// <summary>
      /// The handler invoked by System.CommandLine. This will not be public when generated is more sophisticated.
      /// </summary>
      /// <param name="invocationContext">The System.CommandLine Invocation context used to retrieve values.</param>
      public int Invoke(InvocationContext invocationContext)
      {
         var result = GetResult(invocationContext);
         DemoHandlers.Handlers.Voyager(result.Console, result.Greeting, result.Janeway, result.Chakotay, result.Torres, result.Tuvok, result.SevenOfNine);
         return invocationContext.ExitCode;
      }
      
      /// <summary>
      /// The handler invoked by System.CommandLine. This will not be public when generated is more sophisticated.
      /// </summary>
      /// <param name="invocationContext">The System.CommandLine Invocation context used to retrieve values.</param>
      public Task<int> InvokeAsync(InvocationContext invocationContext)
      {
         var result = GetResult(invocationContext);
         DemoHandlers.Handlers.Voyager(result.Console, result.Greeting, result.Janeway, result.Chakotay, result.Torres, result.Tuvok, result.SevenOfNine);
         return Task.FromResult(invocationContext.ExitCode);
      }
      
      public Argument<string> GreetingArgument {get; set;}
      public Option<bool> JanewayOption {get; set;}
      public Option<bool> ChakotayOption {get; set;}
      public Option<bool> TorresOption {get; set;}
      public Option<bool> TuvokOption {get; set;}
      public Option<bool> SevenOfNineOption {get; set;}
   }
   
}
